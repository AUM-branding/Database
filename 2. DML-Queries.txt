use Redacted
show tables;

----- View table data SQL Plus:
describe CUSTOMER;
describe INVOICES;
describe ITEM;

----- Allow more flexible grouping
SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));

----- View table data (SQL)
exec sp_columns "table"

/*
Various selects:
*/

----- Select a certain item
select ITEM_ID, DESCRIPTION, PRICE from ITEM;

----- Select all invoice data
select * from INVOICES;

----- Select customers with credit limit above 1000
select FIRST_NAME, LAST_NAME, CREDIT_LIMIT
from CUSTOMER

where CREDIT_LIMIT >= 1000;

----- Select invoices from a customer with a specified date
select INVOICE_NUM
from INVOICES

where CUST_ID = 125 and INVOICE_DATE = '2021-11-15';

----- Select customer with a certain sales rep
select CUST_ID, FIRST_NAME, LAST_NAME
from CUSTOMER

where REP_ID = 10 or REP_ID = 15;

----- Select items from all categories except one
select ITEM_ID, DESCRIPTION
from ITEM

where CATEGORY != 'HOR';

----- Select items between a certain range
select ITEM_ID, DESCRIPTION, ON_HAND
from ITEM

where ON_HAND between 10 and 30;

----- Select items from a category and provide a value for its multitude of items
select ITEM_ID, DESCRIPTION, (ON_HAND * PRICE) as ON_HAND_VALUE
from ITEM

where CATEGORY = 'CAT';

----- Select items from a category and provide the same value where it is minimally set to a number
select ITEM_ID, DESCRIPTION, (ON_HAND * PRICE) as ON_HAND_VALUE
from ITEM

where (ON_HAND * PRICE) >= 1500;

----- Select using "IN" to simplify multiple duplicate conditions
select ITEM_ID, DESCRIPTION
from ITEM

where CATEGORY in ('FSH', 'BRD');

----- Select customers with a first name starting with a letter
select CUST_ID, FIRST_NAME, LAST_NAME
from CUSTOMER

where FIRST_NAME like 'A%';

----- Alphabetically list all items by description
select *
from ITEM

order by DESCRIPTION;

----- Select all items ordered by a location, then by their ID
select *
from ITEM

order by LOCATION, ITEM_ID;

----- Select how many customers have balances greater than their credit limit and display it with the default header
select count(*)
from CUSTOMER

where BALANCE > CREDIT_LIMIT;

----- Select the total balances for customers with a certain sales rep, and balance that is less than their limit
select SUM(BALANCE)
from CUSTOMER

where REP_ID = 10 and BALANCE < CREDIT_LIMIT;

----- Select item values where the total on hand is more than the average
select ITEM_ID, DESCRIPTION, (ON_HAND * PRICE) as ON_HAND_VALUE
from ITEM

where (ON_HAND) > (select avg(ON_HAND) 
                   from ITEM);

----- Select item data where the price/item is holding the lowest price
select ITEM_ID, DESCRIPTION, PRICE
from ITEM

where PRICE = (select MIN(PRICE)
               from ITEM);

----- Select the sum of balances per sales rep, and group and order the results by rep
select REP_ID, sum(BALANCE) as BALANCE
from CUSTOMER

group by REP_ID order by REP_ID;

----- Select each sales rep customer balance sum where the sum is greater than 150
select REP_ID, sum(BALANCE) as BALANCE
from CUSTOMER

group by REP_ID
having sum(BALANCE) > 150

order by REP_ID;

/*
Joined selects:
*/

----- Select customer data from a seperate table
select INVOICE_NUM, INVOICE_DATE, INVOICES.CUST_ID, FIRST_NAME, LAST_NAME
from INVOICES

join CUSTOMER on INVOICES.CUST_ID = CUSTOMER.CUST_ID

----- Exists alternative
select CUSTOMER.CUST_ID, FIRST_NAME, LAST_NAME
from CUSTOMER

join INVOICES on CUSTOMER.CUST_ID = INVOICES.CUST_ID
where exists 
(
  select CUST_ID from INVOICES 
  where CUST_ID = CUSTOMER.CUST_ID and INVOICE_DATE = '2021-11-15'
)

group by CUST_ID;

----- Select/cat multiple tables
select 
INVOICES.INVOICE_NUM, INVOICE_DATE, INVOICE_LINE.ITEM_ID,  DESCRIPTION, CATEGORY
from INVOICES
join INVOICE_LINE on INVOICES.INVOICE_NUM = INVOICE_LINE.INVOICE_NUM
join ITEM on INVOICE_LINE.ITEM_ID = ITEM.ITEM_ID

----- Select reps with certain customer constraints
select SALES_REP.REP_ID, SALES_REP.FIRST_NAME, SALES_REP.LAST_NAME from SALES_REP
join CUSTOMER on CUSTOMER.REP_ID = SALES_REP.REP_ID
where exists (select CREDIT_LIMIT from CUSTOMER where CREDIT_LIMIT > 500)
group by SALES_REP.REP_ID

----- Simple select with multiple joins
select CUSTOMER.CUST_ID, CUSTOMER.FIRST_NAME, CUSTOMER.LAST_NAME
from CUSTOMER
join INVOICES on INVOICES.CUST_ID = CUSTOMER.CUST_ID
join INVOICE_LINE on INVOICE_LINE.INVOICE_NUM = INVOICES.INVOICE_NUM
join ITEM on ITEM.ITEM_ID = INVOICE_LINE.ITEM_ID
where ITEM.DESCRIPTION like 'Wild Bird Food%'
group by CUSTOMER.CUST_ID

----- Select by category holders of a certain size
select CATEGORY, ITEM_ID, DESCRIPTION from ITEM
where CATEGORY in
(
  select CATEGORY from ITEM
  group by CATEGORY
  having count(*) = 2
)
order by CATEGORY;

----- Select via various tables
select INVOICES.INVOICE_NUM, INVOICES.INVOICE_DATE
from INVOICES
join INVOICE_LINE on INVOICE_LINE.INVOICE_NUM = INVOICES.INVOICE_NUM
join ITEM on ITEM.ITEM_ID = INVOICE_LINE.ITEM_ID
join CUSTOMER on CUSTOMER.CUST_ID = INVOICES.CUST_ID
where DESCRIPTION like 'Wild Bird Food%'
or FIRST_NAME = 'James' and LAST_NAME = 'Gonzalez'

----- Select items with prices higher than a certain category using "all"
select ITEM_ID, DESCRIPTION, PRICE, CATEGORY
from ITEM
where PRICE > all
(
  select PRICE
  from ITEM
  where CATEGORY in ('CAT')
)

----- Select all items using constraints and also list which invoices include them
select ITEM.ITEM_ID, DESCRIPTION, ON_HAND, INVOICE_NUM, QUANTITY
from ITEM
left join INVOICE_LINE on ITEM.ITEM_ID = INVOICE_LINE.ITEM_ID

----- Select from numerous tables using where over join
select FIRST_NAME, LAST_NAME
from PROPERTY, OWNER
where OWNER.OWNER_NUM = PROPERTY.OWNER_NUM
and BDRMS = 2

----- Alternate text for selects keeping the join conditions towards the bottom of a query
select FIRST_NAME, LAST_NAME
from PROPERTY, OWNER
where exists(
  select *
  from PROPERTY
  where OWNER.OWNER_NUM = PROPERTY.OWNER_NUM
  and BDRMS = 2
)
and OWNER.OWNER_NUM = PROPERTY.OWNER_NUM

----- Comparing data in one table using major and minor sort keys
select P1.PROPERTY_ID, P2.PROPERTY_ID, P1.BDRMS

from PROPERTY P1, PROPERTY P2

where P1.BDRMS = P2.BDRMS
order by P1.PROPERTY_ID asc, P2.PROPERTY_ID;

----- Alias union (helpful if joins can't reach all the data)
select Alias.ADDRESS, Alias.SQR_FT, Alias.OWNER_NUM,
       Alias.SERVICE_ID, Alias.EST_HOURS, Alias.SPENT_HOURS
from
(
select PROPERTY.ADDRESS, PROPERTY.SQR_FT, PROPERTY.OWNER_NUM,
       SERVICE_REQUEST.SERVICE_ID, SERVICE_REQUEST.EST_HOURS, SERVICE_REQUEST.SPENT_HOURS
from PROPERTY, SERVICE_REQUEST
  where PROPERTY.PROPERTY_ID = SERVICE_REQUEST.PROPERTY_ID
  and SERVICE_REQUEST.CATEGORY_NUMBER = 4
union
select PROPERTY.ADDRESS, PROPERTY.SQR_FT, PROPERTY.OWNER_NUM,
       null as SERVICE_ID, null as EST_HOURS, null as SPENT_HOURS
from PROPERTY
) as Alias
group by Alias.ADDRESS
